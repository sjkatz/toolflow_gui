/****************************************************************************
    AUTHOR: Shaun Katz
            University of Cape Town (UCT)
            Department of Electrical Engineering
            Software Defined Radio Group (SDRG)
    DATE:   02/03/2012
****************************************************************************/

#include "port.h"
#include <QPen>
#include <QDebug>
#include <QPainter>
#include <QApplication>

Port::Port(QString name, Direction direction, Type type, int msb, int lsb, int id, QGraphicsItem * parent, QGraphicsScene *scene)
    : QGraphicsItem(parent, scene)
{
    setName(name);
    setDirection(direction);
    setType(type);
    setMsb(msb);
    setLsb(lsb);
    setId(id);

    setAcceptHoverEvents(true);
}

Port::Port(Port& ref)
    : QGraphicsItem(ref.parentItem(), ref.scene())
{

    setName(ref.name());
    setDirection(ref.direction());
    setType(ref.type());
    setMsb(ref.msb());
    setLsb(ref.lsb());
    setId(ref.id());
}

Port& Port::operator=(Port& ref)
{
    Port* port = new Port(ref);
    return *port;
}

int Port::id()
{
    return d_id;
}

void Port::setId(int id)
{
    d_id = id;
}

QString Port::name()
{
    return d_name;
}

void Port::setName(QString name)
{
    d_name = name;
}

Port::Direction Port::direction()
{
    return d_direction;
}

void Port::setDirection(Direction direction)
{
    d_direction = direction;
}

Port::Type Port::type()
{
    return d_type;
}

void Port::setType(Type type)
{
    d_type = type;
}

int Port::msb()
{
    return d_msb;
}

void Port::setMsb(int msb)
{
    d_msb = msb;
}

int Port::lsb()
{
    return d_lsb;
}

void Port::setLsb(int lsb)
{
    d_lsb = lsb;
}

int Port::width()
{
    return d_width;
}

void Port::setWidth(int width)
{
    d_width = width;
}

void Port::paint(QPainter *painter,
                           const QStyleOptionGraphicsItem *option,
                           QWidget *widget)
{
    QPolygonF polygon;
    QRectF rect;
    int flag;
    if(d_direction == Port::IN){
        polygon << QPoint(0, 0) << QPoint(-3, 0);
        rect = QRectF(1,-1.5,20,2.5);
        flag = Qt::AlignLeft;
    }
    else{
        polygon << QPoint(0, 0) << QPoint(3, 0);
        rect = QRectF(-20,-1.5,19,2.5);
        flag = Qt::AlignRight;
    }
    painter->drawPolygon(polygon);
    QFont font = QApplication::font();
    font.setPixelSize( rect.height() );
    painter->setFont( font );
    painter->drawText(rect, flag, name());
}

QRectF Port::boundingRect() const
{
    return QRectF(-3, -2, 6, 3);
}

